#!/usr/bin/env bash
set -e; [ "$debug" == "true" ] && set -x

buildroot=${buildroot:-/var/cache/pkg}
buildcache=${buildcache:-$HOME/.cache/dockervm}

rootfs="$buildcache/rootfs"
squashfs="$buildcache/sqashfs"
isodir="$buildcache/iso"
moddir="lib/modules/$KERNELVERSION"

pkg_install() {
        # install libraries to builder container which required for static builds
        pkgman install \
                libevent libmnl libnftnl linux readline e2fsprogs \
                libressl skalibs execline s6 zlib ncurses libpcap

        # install main packages for stage1
        pkgman -d $rootfs install \
                filesystem bash curl dhcpcd dnsmasq dropbear execline haveged htop \
                init iptables s6 s6-linux-utils s6-portable-utils s6-rc \
                tmux tmuxifier rng-tools iftop

        # install main packages for stage2
        pkgman -d $squashfs install portainer syncthing docker gotty
                
        # setup symlinks
        chroot $rootfs bash -c "ln -sf /bin/busybox.static /bin/busybox"
        chroot $rootfs bash -c "ln -sf /etc/terminfo /usr/share/terminfo"
        chroot $rootfs bash -c "ln -sf /usr/share/tmuxifier/bin/tmuxifier /usr/bin/tmuxifier"
        chroot $rootfs bash -c "cp -f /etc/session/.bashrc /root"
        chroot $rootfs bash -c "cp -f /etc/session/.htoprc /root"
        chroot $rootfs bash -c "cp -f /etc/session/.tmux.conf /root"
        chroot $rootfs bash -c "passwd root -d toor"

        # install bootloader
        pkgman -d $isodir install syslinux
}

# manual copy of some binaries
host_install() {
        rm $rootfs/usr/sbin/setfont
        cat "$buildroot/pkgdb/filesystem/base.files" | cpio -d -u -m -p "$rootfs/"
}

# clean rootfs
root_clean() {
        cd $rootfs
        find $rootfs/usr/share -type d | grep -vE "share$|dhcpcd|fonts|keymaps|term|tmux" | xargs rm -rf

        rm -rf usr/lib/* usr/include usr/etc \
	       etc/s6/inactive boot
}
    
# create initrd and main images
create_disks() {
        # strip binary files
        bash -c "find $rootfs -type f | xargs strip --strip-all &>/dev/null; exit 0"

	 # copy kernel modules
        cd "/$moddir"
        mkdir -p "$rootfs/$moddir"
        cat "$buildroot/pkgdb/filesystem/base.modules" | cpio -d -u -m -p "$rootfs/$moddir"
        depmod -b "$rootfs" $KERNELVERSION

        # create initrd image
        cd $rootfs
        umask 0022
        (chown -R root "$rootfs" && cd "$rootfs" && find . | sort | cpio --quiet -o -H newc | xz --check=crc32 -9 -e --verbose) > $isodir/ramdisk.img

        # create main sqashfs image
        mksquashfs $squashfs $isodir/squashfs.img -b 1048576 -comp xz -Xdict-size 100%
}

make_iso() {
        # install kernel
        cp /boot/vmlinuz $isodir/kernel

        # Builds an image that can be used as an ISO and a disk image
        xorriso -as mkisofs \
                -c syslinux/boot.cat \
                -b syslinux/isolinux.bin \
                -no-emul-boot -boot-load-size 4 -boot-info-table \
                -isohybrid-mbr /usr/share/syslinux/isohdpfx.bin \
                -eltorito-alt-boot \
                -e /ramdisk.img \
                -no-emul-boot -isohybrid-gpt-basdat \
                -o "$buildroot/dist/dockervm.iso" $isodir
}

# main script
rm -rf "$rootfs" "$isodir" "$squashfs"
mkdir -p "$rootfs" "$isodir" "$squashfs"

pkg_install
host_install
root_clean
create_disks
make_iso
